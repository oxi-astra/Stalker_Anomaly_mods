
local function print_dbg(msg, num)
	printf(string.format("- [aim.script] | ") .. msg, num)
end


function dot_eye(position)
	local toPoint = vector():set(position):sub(device().cam_pos):normalize()
	local toEye = device().cam_dir
	local dot = toPoint:dotproduct(toEye)
	return dot
end


function is_valid_object(obj)
	if (IsStalker(obj) and (obj:relation(db.actor) >= game_object.enemy) or IsMonster(obj)) and obj:alive() and db.actor:alive() and db.actor:see(obj) then
	--if (IsStalker(obj) or IsMonster(obj)) and obj:alive() and db.actor:alive() and db.actor:see(obj) then		-- use this for aiming on non-enemy target
		return true
	else 
		return false 
	end
end


local LastTarget = nil
local bone = "bip01_neck"
-- bip01_head
-- bip01_neck
-- bip01_spine


function dot_check(obj)
	local pos = utils_obj.safe_bone_pos(obj, bone)
	local dot = dot_eye(pos)
	local trigger_zone = 0.995
	if distance_between_safe(db.actor, obj) <= 10 then
		trigger_zone = 0.6
	end
	if dot and dot >= trigger_zone then
		return true
	else
		return false
	end
end


function search_target()
	local t = db.storage
	for id,st in pairs(t) do
		if st and st.object and is_valid_object(st.object) and dot_check(st.object) then
			LastTarget = st.object
			return
		end
	end
	LastTarget = nil
end


function trace_target(obj)
	if not(obj) then return end
	local pos = utils_obj.safe_bone_pos(obj, bone)
	local look_dir = pos:sub(device().cam_pos):normalize()
	local aim_target = vector():mad(device().cam_pos, look_dir, 100)
	db.actor:actor_look_at_point(aim_target)
end


function aim_assist()
	local wpn = db.actor:active_item()
	if wpn and IsWeapon(wpn) then

		local obj = level.get_target_obj()
		if obj and is_valid_object(obj) and dot_check(obj) then
			LastTarget = obj
			trace_target(obj)
		elseif LastTarget and is_valid_object(LastTarget) and dot_check(LastTarget) then
			trace_target(LastTarget)
		else
			db.actor:actor_stop_look_at_point()
			search_target()
		end
	end
end


function on_game_start()
	RegisterScriptCallback("actor_on_update", aim_assist)
end