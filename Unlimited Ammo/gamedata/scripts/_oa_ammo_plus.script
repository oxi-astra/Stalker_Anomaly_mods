
local function print_dbg(msg, num)
	printf(string.format("- [oa_ammo_plus.script] | ") .. msg, num)
end

local force_drop_ammo = false

function oa_add_ammo()
	local function drop_ammo(_,obj)
		if obj:is_ammo() then
			alife_release(obj)
		end
	end
	if force_drop_ammo then 
		db.actor:iterate_inventory(drop_ammo,db.actor) 
	end
	
	local wpn = db.actor:active_item()
	if not IsWeapon(wpn) then 
		return
	end
	
	local ammo_mag_size = ini_sys:r_u32(wpn:section(), "ammo_mag_size")
	local ammo = utils_item.get_ammo(wpn:section(), wpn:id(), true)
	local string_find = string.find
	
	for sec,id in pairs(ammo) do
		if not(string_find(sec,"_verybad") or string_find(sec,"_bad") or string_find(sec,"buck_self")) then
			local ammo_amount = utils_item.get_amount(db.actor, sec)
			if ammo_amount < ammo_mag_size then

				alife_create_item(sec, db.actor, { ammo = ammo_mag_size })
			end
		end		
	end

end


--[[
utils_item.get_amount(db.actor, "ammo_12x70_buck")
local in_actor_inv = utils_item.in_actor_inv
local in_npc_inv = utils_item.in_npc_inv

for i = 1, #ammo_table do
	local num_in_box = ini_sys:r_u32(ammo_table[i], "box_size")
	alife_create_item(ammo_table[i], db.actor, { ammo = num_in_box })
end
--]]

--[[
local ammo_in_box = IsItem("ammo", sec)
if ammo_in_box then
	give_object_to_actor(sec, 100 / ammo_in_box + 1)
else
	give_object_to_actor(sec, 1)
end
print_dbg(sec..' '..utils_item.get_amount(db.actor, sec))
print_dbg(sec..' '.."box_size"..' '..ini_sys:r_u32(sec, "box_size"))

local mag = wpn:get_ammo_in_magazine()
if mag == 0 then
	wpn:set_ammo_elapsed(ini_sys:r_u32(wpn:section(), "ammo_mag_size"))
	wpn:set_condition(1)
end
--]]

function on_game_start()
	RegisterScriptCallback("actor_on_weapon_reload", oa_add_ammo)
	RegisterScriptCallback("actor_on_weapon_jammed", oa_add_ammo)
	RegisterScriptCallback("actor_on_weapon_no_ammo", oa_add_ammo)
end