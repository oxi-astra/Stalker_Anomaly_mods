if d1sp_track_compatible_items_mcm then
	original = d1sp_track_compatible_items_mcm
elseif d1sp_track_compatible_items then
	original = d1sp_track_compatible_items
end

get_item_parts_original = original.get_item_parts
mark_untracked_original = original.mark_untracked

local track_parts = {}
local track_upgr = {}
order_table = {}


--[[------------------------------------debugging------------------------------------------------------------]]

local debug = false

function print_list(tbl)
	for sec,count in pairs(tbl) do
		printf("sec is %s", sec)
		if type(count) == "table" then
			printf('TABLE next')
			print_list(count)
		else
			printf("count is %s", count)
		end
	end
end

function on_game_start()
	if debug then
		RegisterScriptCallback("on_key_press", on_key_press)
	end
end

function on_key_press(key) 
	if key == DIK_keys.DIK_Z and debug == true then 
		printf("track_parts:")
		print_list(track_parts)
		printf("track_upgr:")
		print_list(track_upgr)
		printf("order_table:")
		print_list(order_table)
	end 
end


--[[------------------------------from itms_manager.script---------------------------------------------------]]

local string_find = string.find

local upg_gr = {
	["first"] = 1,
	["secon"] = 2,
	["third"] = 3,
	["fourt"] = 4,
	["fifth"] = 5,
}

local upg_ind = {
	["a"] = 1,
	["b"] = 2,
	["c"] = 3,
	["d"] = 4,
	["e"] = 5,
	["f"] = 6,
}

local function extract_upgr_tools_local(t1, current_grp)

	local elements = parse_list(ini_sys, current_grp, "elements")
	
	-- Gather groups and indexes
	for i=1,#elements do -- search in upgrade group elements
		for k,v in pairs(upg_gr) do
			if string_find(elements[i],k) then -- if we found a legit element
				local indx = elements[i]:sub(9,9) -- get the index
				local upg_idx = indx and upg_ind[indx]
				if upg_idx then
					local prop = ini_sys:r_string_ex(elements[i],"property")
					if prop then
						local pr = str_explode(prop,",")
						local tool = utils_item.get_upgrade_prop_tool(pr[1])
						local num = ((upg_idx <= 2) and 1) or ((upg_idx <= 4) and 2) or 3
						local sec_tool = tool and tool:gsub("%^d", tostring(num)) or nil
						if sec_tool then
							if t1[sec_tool] then
								t1[sec_tool] = t1[sec_tool] + 1
							else
								t1[sec_tool] = 1
							end
						end
					end
				end
			end
		end
	end
end

--[[-------------------------------------------monkey patch оригинал----------------------------------]]

function original.get_item_parts(section_name)
	result_for_parts = get_item_parts_original(section_name)
	for _,sec in pairs(result_for_parts) do
		if track_parts[sec] then
			track_parts[sec] = track_parts[sec] + 1
		else
			track_parts[sec] = 1
		end
	end
	return result_for_parts
end


function original.get_item_upgrades(section_name)	-- код взят из оригинала и подправлен
	local parse_sec = section_name
    local section = section_name
    local upgrades = nil
    local parent = SYS_GetParam(0, section, "parent_section", "not_found")
    if parent and parent ~= "not_found" then
        upgrades = SYS_GetParam(0, parent, "upgrades", "not_found")
        parse_sec = parent
    else
        upgrades = SYS_GetParam(0, section, "upgrades", "not_found")
    end
    if upgrades and upgrades ~= "" then
        local parsed_upgrades = parse_list(ini_sys, parse_sec, "upgrades")
        local out_tbl = {}
        for i = 1, #parsed_upgrades do
            extract_upgr_tools_local(out_tbl, parsed_upgrades[i])	-- функция extract_upgr_tools из itms_manager поменяна на extract_upgr_tools_local
        end
        local result = {}
        for key, value in pairs(out_tbl) do
            result[#result + 1] = key
			if track_upgr[key] then						-- здесь добавлен track_upgr
				track_upgr[key] = track_upgr[key] + value
			else
				track_upgr[key] = value
			end
        end
        return result
    end
    return {}
end


function original.mark_untracked(section_name, type)
	mark_untracked_original(section_name, type)
	local list_to_release = nil
	if type == "part" then 
		local list_to_release = get_item_parts_original(section_name)
		for _,sec in pairs(list_to_release) do
			if track_parts[sec] and track_parts[sec] > 2 then
				track_parts[sec] = track_parts[sec] - 2
			elseif track_parts[sec] and track_parts[sec] <= 2 then
				track_parts[sec] = nil
			end
		end
		
	elseif type == "upgrade" then
		local parse_sec = section_name
		local section = section_name
		local upgrades = nil
		local parent = SYS_GetParam(0, section, "parent_section", "not_found")
		if parent and parent ~= "not_found" then
			upgrades = SYS_GetParam(0, parent, "upgrades", "not_found")
			parse_sec = parent
		else
			upgrades = SYS_GetParam(0, section, "upgrades", "not_found")
		end
		if upgrades and upgrades ~= "" then
			local parsed_upgrades = parse_list(ini_sys, parse_sec, "upgrades")
			local out_tbl = {}
			for i = 1, #parsed_upgrades do
				extract_upgr_tools_local(out_tbl, parsed_upgrades[i])
			end
			
			for key, value in pairs(out_tbl) do
				if track_upgr[key] then
					track_upgr[key] = track_upgr[key] - value * 2
				end
				if track_upgr[key] and track_upgr[key] <= 0 then
					track_upgr[key] = nil
				end
			end
        end
	end
end


--[[-------------------------------------------действия для диалогов----------------------------------]]


function make_order_parts(npc)
	local name = npc:character_name()
	if not order_table[name] then order_table[name] = {} end

	order_table[name]["part"] = dup_table(track_parts)
	if not order_table[name]["bool"] then order_table[name]["bool"] = true end
	
	CreateTimeEvent(npc:id(), name, 10, order_ready, npc, "part")
end


function make_order_upgr(npc)
	local name = npc:character_name()
	if not order_table[name] then order_table[name] = {} end

	order_table[name]["upgr"] = dup_table(track_upgr)
	if not order_table[name]["bool"] then order_table[name]["bool"] = true end
	
	CreateTimeEvent(npc:id(), name, 10, order_ready, npc, "upgr")
end


function make_order_part_and_upgr(npc)
	local name = npc:character_name()
	if not order_table[name] then order_table[name] = {} end

	order_table[name]["part"] = dup_table(track_parts)
	order_table[name]["upgr"] = dup_table(track_upgr)
	if not order_table[name]["bool"] then order_table[name]["bool"] = true end
	
	CreateTimeEvent(npc:id(), name, 10, order_ready, npc, "part_and_upgr")
end


function order_ready(npc, string)
	name = npc:character_name()
	RemoveTimeEvent(npc:id(), name)
	
	local msg = game.translate_string("oa_msg_order_ready")
	local comm = dynamic_news_helper.GetCommunityDescription(npc,6)
	local se = strformat("%s, %s",name,comm)
	dynamic_news_helper.send_tip(msg, se, 5, 10, npc:character_icon(), nil, "npc")


	if string == "part" then
		trader_autoinject.spawn_items(npc, order_table[name]["part"], true)
	elseif string == "upgr" then
		trader_autoinject.spawn_items(npc, order_table[name]["upgr"], true)
	elseif string == "part_and_upgr" then
		trader_autoinject.spawn_items(npc, order_table[name]["part"], true)
		trader_autoinject.spawn_items(npc, order_table[name]["upgr"], true)
	end
	
	order_table[name] = nil
end


function pay_for_order1(npc, actor)
	actor:transfer_money(1000, npc)
	news_manager.relocate_money(actor, "out", 1000)
end


function pay_for_order2(npc, actor)
	actor:transfer_money(10000, npc)
	news_manager.relocate_money(actor, "out", 10000)
end


function pay_for_order3(npc, actor)
	actor:transfer_money(9000, npc)
	news_manager.relocate_money(actor, "out", 9000)
end


--[[-------------------------------------------условия для диалогов----------------------------------]]


function requirement_for_upgr(actor, npc)
	if not npc then return end

	local supply_level = trader_autoinject.supply_level(npc, true) or 1	
	if (supply_level >= 4) then return true end
	return false
end


function check_not_bool(actor, npc)
	local name = npc:character_name()
	if not order_table[name] then return true end
	return false
end


function has_money_for_order1(actor, npc)
	return db.actor:money() >= 1000
end


function has_money_for_order2(actor, npc)
	return db.actor:money() >= 10000
end


function has_money_for_order3(actor, npc)
	return db.actor:money() >= 9000
end


function check_mas(mas)
	local i = 0
	for _,sec in pairs(mas) do
		i = i + 1
	end
	if i ~= 0 then return true end
	return false
end

function check_parts(actor, npc)
	if check_mas(track_parts) then return true end
	return false
end


function check_upgr(actor, npc)
	if check_mas(track_upgr) then return true end
	return false
end


function check_parts_and_upgr(actor, npc)
	if check_mas(track_parts) and check_mas(track_upgr) then return true end
	return false
end